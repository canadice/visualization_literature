#########################################################
##### En kort manual över R-koder för visualisering #####
#####                Rev. 2018-03                   #####
#########################################################

##########           Förinställningar          ##########
## Laddar working directory, den mapp på datorn där jag har alla filer
# dir <- "F:/OneDrive/OneDrive - Linköpings universitet/Jobb/LiU/Kurser/1. Grundkurser i statistik/732G45 - Grundläggande statistik och dataanalys/2018/Visualisering"
dir <- "C:/Users/isahi12/OneDrive - Linköpings universitet/Jobb/LiU/Kurser/1. Grundkurser i statistik/732G45 - Grundläggande statistik och dataanalys/2018/Visualisering"

setwd(dir)

## För att installera paket som inte finns från början på datorn, 
## VIKTIGT! Detta behövs bara köras en gång på en dator! (Ta bort # för att köra koden nedan)
# install.packages(c("ggplot2", "RColorBrewer"))

require(ggplot2)
require(RColorBrewer)

## Läser in datamaterialet, tänk på vilket format decimalerna har i den filen vi vill importera
bil <- read.csv2("VIS1/D2/D1bil.csv", dec = ".")
elev <- read.csv2("VIS1/D2/D1elev.csv", dec = ".")

##############################################################
###############           Exempelkod           ###############
##############################################################

##############################################################
##########           Enkelt stapeldiagram           ##########
#####                      RÅDATA                        #####

### Databearbetning före visualiseringen
## För att storleksordna staplarna måste vi ändra hur R läser in de kategoriska värdena i datamaterialet
bil <- within(bil,                                            # Anger vilket datamaterial vi vill ändra
              Civilstånd <-                                   # Anger vilken variabel vi vill ändra i det angivna datamaterialet
                factor(Civilstånd,                            # Anger att vi vill skapa en kategorisk variabel utifrån värdena i variabeln Civilstånd
                       levels=names(sort(table(Civilstånd),   # Anger att vi vill ordna om värdena i Civilstånd utefter deras frekvens. Levels = kan också anges till en vektor med de kategorier i den ordning vi vill sortera efter 
                                         decreasing=TRUE))))  # Anger nedåtgående sortering
### Skapandet av diagrammet
## OBS! Användandet av p efter varje kodrad är bara ett sätt att visa upp vad som händer efter varje individuella kodtillägg
## R kommer alltså att skriva ut resultatet av de instruktioner som vi angett efter varje tillägg. Detta behöver inte användas.

## Börja med att välja vilken datamaterial som ska målas på "tavlan"
p <- ggplot(data = bil)    
p

## Välj vilka värden ur datan ska "målas", på x-axeln de kategorier vi har
p <- p + aes(x = Civilstånd) 
p

## Välj vilken sorts diagram vi vill "måla". 
## Ändra färger och andra egenskaper för att göra diagrammet mer estetiskt tilltagande
p <- p + geom_bar(aes(y = stat(count/sum(count))),            # Anger att vi vill skapa en y-variabel baserat på de relativa frekvenserna
                  fill = "dark orange",                       # Anger att fyllnadsfärgen på staplarna ska vara mörk orange
                  colour = "black")                           # Anger att kantlinjerna på varje stapel ska vara svart
p

#####                  SAMMANSTÄLLD DATA                #####

### Skapandet av diagrammet
## OBS! Användandet av p efter varje kodrad är bara ett sätt att visa upp vad som händer efter varje individuella kodtillägg
## R kommer alltså att skriva ut resultatet av de instruktioner som vi angett efter varje tillägg. Detta behöver inte användas.
## Notera att vissa kodsnuttar är annorlunda beroende på om man utgår från rådata eller sammasntälld data (ex. frekvenstabell)

## Börja med att välja vilken information som ska på "tavlan"
p <- ggplot(data = bil) 
p

## Välj vilka värden ur datan ska "målas", på x-axeln de kategorier vi har, y-axeln dess frekvens från tabellen
p <- p + aes(x = reorder(kategori,                            # Reorder anger att vi vill sortera kategorierna. Om sortering inte är av intresse används x = kategori direkt 
                         frekvens),                           # utefter deras frekvens i frekvenstabellen, använd -frekvens för omvänd sortering
             y = frekvens)                                    # Anger y-axeln variabel
p

## Välj vilken sorts diagram vi vill "måla". 
## Ändra färger och andra egenskaper för att göra diagrammet mer estetiskt tilltagande
p <- p + geom_bar(stat = "identity",                          # Anger att höjden på stapeln ska styras av värdet från datamaterialet
                  fill = "dark orange",                       # Anger att fyllnadsfärgen på staplarna ska vara mörk orange
                  colour = "black")                           # Anger att kantlinjerna på varje stapel ska vara svart
p

#####      Ytterligare instruktioner till diagrammet    #####
## Formaterar y-axeln till procent (%). 
## ANVÄNDS INTE FÖR SAMMANSTÄLLD DATA MELLAN 0-100
p <- p + scale_y_continuous(labels = scales::percent)
p

## Färdiginställda teman finns, theme_bw() är i min åsikt det stilrenaste som man bör utgå ifrån
p <- p + theme_bw()
p

## Lägg till diagramtexter, notera att då enhetsvärden finns på y-axeln (t.ex. %) bör y-axeltiteln tas bort
p <- p + labs(x = "Civilstånd",                               # Anger titel på x-axeln
              y = "",                                         # Anger titel på y-axeln
              title = "Fördelning av civilstånd",             # Anger titel på diagrammet  
              caption = "Källa: Egen data")                   # Anger källhänvisningen
p

## Rotera axelförklaringen och flyttar diagramtiteln
p <- p + theme(axis.title.y =                                 # Anger att vi vill ändra på y-axeltiteln
                 element_text(angle = 0,                      # Anger rotationen av texten, 0 anger horisontell
                              hjust = 1,                      # Anger horisontell justering, 0 är längst till vänster på ritytan 1 är längst till höger
                              vjust = 0.5),                   # Anger vertikal justering, 0 är längst ner, 1 högst upp
               plot.title =                                   # Anger att vi vill ändra på diagramtiteln
                 element_text(hjust = 0.5)) 
p

## Ta bort vertikala stödlinjer, .x för vertikal, .y för horisontal
p <- p + theme(panel.grid.major.x =                           # Anger att vi vill ändra på stödlinjer som följer skalstrecken på x-axeln
                 element_blank(),                             # Funktion som tar bort linjerna helt och hållet
               panel.grid.minor.x =                           # Anger att vi vill ändra på stödlinjer som ligger mittemellan skalstrecken på x-axeln
                 element_blank(),
               panel.grid.major.y =                           # Anger att vi vill ändra på stödlinjer som följer skalstrecken på y-axeln
                 element_line(color = "dark grey"))           # Ändrar färgen på stödlinjen till mörk grå
p

#####              Mer avancerade inställningar         #####
## Ändra skalan på axlarna, annorlunda ifall det är continuous (kontinuerlig) eller discrete (diskret) skala. 
## Notera att scale_y_continuous här skriver över den tidigare angivna funktionen, vilket innebär att samma argument (labels) som innan måste anges igen
p + scale_y_continuous(breaks = seq(0, .60, by = .05), 
                       labels = scales::percent)

## Ta bort avståndet mellan y=0 och x-axeln.
p + scale_y_continuous(expand= c(0,0), 
                       limits = c(0, .60), 
                       breaks = seq(0, .60, .10), 
                       labels = scales::percent)

## Roterar diagrammet 90 grader
p + coord_flip()

## Skapar axeltext på varannan skalstreck
## För att underlätta i scale_.. koden anger jag en separat variabel som anger breaks
breaks <- seq(0, .60, by = .05)
p + scale_y_continuous(expand= c(0,0),                        # Tar bort avståndet mellan staplarna och axlarna
                       limits = c(0, .60),                    # Sätter min och max gräns på axlarna
                       breaks = breaks,                       # Säger att mina "tick-marks" ska hamna på redan definierad variabel
                                                              # Skapar etiketter genom att skapa en vektor med etiketter på varannan tick från breaks
                                                              # Lägger samman med en lika lång vektor med tomma etiketter
                                                              # Då breaks är ojämnt antal kommer labels koden generera en ofarlig varning då man tar bort den sista elementet i vektor
                       labels = 
                         as.vector(
                           rbind(scales::percent(seq(0, .60, by = .10)),
                                 rep(" ", length(breaks)/2)))[-(length(breaks)+1)])
                                                              
                       

##############################################################
##########        Grupperat stapeldiagram           ##########
#####                      RÅDATA                        #####

### Skapande av diagrammet
## Väljer datamaterial
p <- ggplot(data = bil) 

## Markerar grupperingsvariabeln i x och variabeln vi vill mäta i fill.
p <- p + aes(x = Civilstånd,                                  # Anger den kategoriska grupperingsvariabeln
             fill = Bil)                                      # Anger den kategoriska mätvariabeln

p <- p + geom_bar(aes(y = stat(count/tapply(count, x, sum)[x])), # Anger att vi vill visa relativa frekvenser summerat separat till 100 inom grupperna
                  position = "stack",                         # Anger "stack" för stackade staplar, "dodge" för grupperade staplar
                  col = "black")                              # Anger kantlinjens färg till svart

#####                  SAMMANSTÄLLD DATA                #####
# För att ordna staplarna i bokstavsordning (enligt legenden) måste viss förändring av datan ske
# order() används för att skapa en rangordning utefter en given variabel i det använda datamaterialet
# datamaterialet[order(datamaterialet$Ordningsvariabeln,decreasing=T),]
ordnad_data <- data[order(data$variabel, decreasing = TRUE),]

# Väljer datamaterial
p <- ggplot(data = ordnad_data) 

# Markerar grupperingsvariabeln i fill
p <- p + aes(x = Civilstånd, y = Freq, fill = Bil) 

# Position definierar om de ska vara stackat ("stack") eller grupperat ("dodge")
p <- p + geom_bar(position = "stack", stat = "identity", col = "black")


## Lägger till egna färger för de olika kategorierna i mätvariabeln
p <- p + scale_fill_manual(name = "Titel",                    # Anger namnet på legenden
                           values =                           # Anger färgerna som vi vill använda i legenden
                             brewer.pal(n = length(unique(bil$Bil)), # Anger hur många färger som ska användas
                                        name = "Oranges"))    # Anger från vilken färgpalette som de ska tas från

#####            Ytterligare instruktioner              #####
## Formaterar y-axeln till procent (%). 
## ANVÄNDS INTE FÖR SAMMANSTÄLLD DATA MELLAN 0-100
p <- p + scale_y_continuous(expand = c(0,0),
                            labels = scales::percent,
                            limits = c(0, 1.05))

## Ytterligare instruktioner likt enkelt stapeldiagram
p <- p + theme_bw() + 
  theme(axis.title.y = 
          element_text(angle = 0, 
                       hjust = 1, 
                       vjust = 0.5), 
        plot.title = 
          element_text(hjust = 0.5),
        panel.grid.major.x = 
          element_blank()) + 
  labs(title = "Bilar på Påhittade gatan grupperat på civilstånd", 
       y = "", caption = "Källa: Egen data")
p



##############################################################
##########          Lådagram (Box plot)             ##########

## Skapar grunden
p <- ggplot(elev) + 
  aes(x = factor(0), y = Alder) +                             # Factor(0) gör så att endast ett lådagram visas
  geom_boxplot(fill = "orange")                               # Anger att vi vill skapa ett lådagram

## Tar bort skalvärden på den tomma x-axeln
p <- p + scale_x_discrete(breaks = NULL)

## Lägger till ytterligare instruktioner
p <- p + theme_bw() + 
  theme(axis.title.y = 
          element_text(angle = 0, 
                       hjust = 1, 
                       vjust = 0.5), 
        plot.title = 
          element_text(hjust = 0.5),
        panel.grid.major.x = 
          element_blank()) +
  labs(title = "Fördelning av Ålder", x = NULL)
p

##############################################################
##########               Histogram                  ##########

## Skapar grunden
p <- ggplot(elev) + 
  aes(Alder) + 
  geom_histogram(fill = "orange", 
                 color = "black",
                 bins = 10)                                   # Definierar hur stora intervall ska visas

## Lägger till instruktioner för y-axeln
p <- p + scale_y_continuous(expand = c(0,0),
                            limits = c(0, 20))

## Lägger till ytterligare instruktioner
p <- p + theme_bw() + 
  theme(axis.title.y = 
          element_text(angle = 0, 
                       hjust = 1, 
                       vjust = 0.5), 
        plot.title = 
          element_text(hjust = 0.5),
        panel.grid.major.x = 
          element_blank(),
        panel.grid.minor.x = 
          element_blank(),
        panel.grid.major.y = 
          element_line(color = "dark gray")) + 
  labs(y = "Antal", 
       x = "Ålder", 
       title = "Fördelning av ålder", 
       caption = "Källa: Egen data")
p

##############################################################
##########          Spridningsdiagram               ##########
 
## Skapar grunden
p <- ggplot(elev) + 
  aes(x = Alder,                                              # Anger x-axelns variabel
      y = Resultat) +                                         # Anger y-axelns variabel
  geom_point()                                                # Definierar punktdiagram

## Lägger till ytterligare instruktioner
p <- p + theme_bw() + 
  theme(axis.title.y = 
          element_text(angle = 0, 
                       hjust = 1, 
                       vjust = 0.5), 
        plot.title = 
          element_text(hjust = 0.5)) + 
  labs(title = "Resultat mot ålder", 
       y = "Resultat", 
       x = "Ålder", 
       caption = "Källa: Egen data")
p

## Skattar en linjär regression utan konfidensband
p_regression <- p + geom_smooth(method = lm,                 # Anger att linjen ska skattas med linjär regression
                                se = FALSE)                  # Anger att vi inte vill se s.k. konfidensband på skattningen
p_regression

## För att lägga till en legend över den skattade linjen måste aes(color = ...) anges
p <- p + geom_smooth(aes(color = "with_outlier"),            # Anger att vi vill skapa en grupp som heter without_outlier som ska ha en separat färg
                     method = lm, 
                     se = FALSE)

## Man kan även vid varje geom_xxxx() ange specifika datamängder som ska användas
## En ny color anges i aes för att visa att det är en ny grupp som ska läggas till i legenden
elev_nytt <- elev[-c(1),]
p <- p + geom_smooth(data = elev_nytt,                       # Anger att en ny geom_smooth() ska skapas utifrån ett annat datamaterial än resten av diagrammet
                     aes(color = "without_outlier"),         # Anger att den nya linjen ska färgläggas enligt gruppen with_outlier
                     method = lm, 
                     se = FALSE)

## För att ändra legenden används scale_color_manual() (color ändrar färger på linjer, fill på staplar)
## Values ändrar färgen på linjerna, labels ändrar etiketten som visas i legenden
p <- p + scale_color_manual(name = "Datamaterial", 
                            values = c("with_outlier" = "dark red", # Anger att gruppen with_outlier ska ha en färg, notera att gruppen måste heta samma sak som vi angivit innan
                                       "without_outlier" = "blue"), # Anger att gruppen without_outlier ska ha en annan färg
                            labels = c("with_outlier" = "Hela datamaterialet", # Anger att etiketten för with_outlier i legenden
                                       "without_outlier" = "Urval av data"))   # Anger att etiketten för with_outlier i legenden
p

##############################################################
##########            Tidsseriediagram              ##########
data <- read.csv2("VIS2/D3/Våldsbrott per 100000 till R.csv")

### En tidsserie
## Plockar ut ett län från datamaterialet med ett antal serier
p <- ggplot(data[data$Län == "Östergötland",]) +              # Detta sätt med [] plockar ut de rader i datamaterialet där mätvärdet på variabeln Län är Östergötland. Det resulterande materialet blir alltså bara data över Östergötland. 
  aes(x = År, 
      y = Brott, 
      color = Län,                                            # Color genererar olika färger för varje Län i legenden som skapas, likt fill = för stapeldiagram. 
      group = Län) +                                          
  geom_line(color = "dark orange")                            # Color i geom_xxx() anger färgen för ALLA objekt av denna geometriska figur. Denna skriver alltså över ifall flera grupper finns i color-argumentet från aes().

## Lägger till ytterligare instruktioner
p <- p + theme_bw() +
  theme(axis.title.y = element_text(angle = 0, 
                                    hjust = 1, 
                                    vjust = 0.5), 
        plot.title = element_text(hjust = 0.5)) +
  labs(y = "Antal", 
       title = "Anmälda våldsbrott per 100 000 invånare i Östergötland",
       caption = "Källa: SCB") 
p
### Flera tidsserier
## Plockar ut ett län från datamaterialet med ett antal serier
p <- ggplot(data) + 
  aes(x = År, 
      y = Brott, 
      color = Län, 
      group = Län) + 
  geom_line(size = 1)                                         # Size ökar storleken på linjerna för att enklare skilja färgerna åt.

# Ändrar färger på serierna
p <- p + scale_color_manual(values = 
                              brewer.pal(length(levels(data$Län)), # Plockar ut lika många färger som antalet Län i grupperingsvariabeln.
                                         "Paired"))           # Anger att paletten Paired ska användas.

# Lägger till ytterligare instruktioner
p <- p + theme_bw() +
  theme(axis.title.y = element_text(angle = 0, 
                                    hjust = 1, 
                                    vjust = 0.5), 
        plot.title = element_text(hjust = 0.5)) +
  labs(y = "Antal", 
       title = "Anmälda våldsbrott per 100 000 invånare",
       caption = "Källa: SCB") 
p

###############################################################################
### Punktdiagramsmatris

require(GGally)

byggnader <- read.csv2("VIS3/L5/Byggande.csv")
krabba <- read.csv2("VIS4/D6/Krabbor.csv", sep = ";", dec = ",")

ggpairs(data = byggnader, 
        columns = c(1,2,3),                                   # Väljer ut vilka kolumner ur det valda datamaterialet för visualisering.
        title = "Samband mellan olika bostadstyper",          # Anger titel på diagrammet.
        upper = "blank",                                      # Tar bort information i den övre diagonalen.
        diag = "blank",                                       # Tar bort informationen i diagonalrutorna.
        axisLabels = "none") +                                # Tar bort skalvärden från diagrammen.
    theme_bw() + theme(plot.title = 
                         element_text(hjust = 0.5))           

# Om man vill gruppera efter en kategorisk variabel
ggpairs(data = krabba, 
        columns = 4:8,                                        # Väljer ut vilka kolumner ur det valda datamaterialet för visualisering.
        title = "Samband mellan mått på krabbor",             # Anger titel på diagrammet.
        upper = "blank",                                      # Tar bort information i den övre diagonalen
        diag = "blank",                                       # Tar bort informationen i diagonalrutorna
        axisLabels = "none",
        mapping = aes(color = sex)) +                         # Färglägger punkterna utefter en kategorisk variabel
  theme_bw() + theme(plot.title = 
                       element_text(hjust = 0.5))
  

### Parallellkoordinatdiagram
p <- ggparcoord(data = krabba,                                # 
                columns = 4:8,                                # Vilka kolumner som ska visualiseras
                scale = "uniminmax",                          # Ska alltid anges
                group = "sex") +                              # Färglägger linjerna utefter en kategorisk variabel
  theme_bw() + theme(plot.title = 
                       element_text(hjust = 0.5)) + 
  labs(x = "Variabler", 
       y = "", 
       title = "Ordnade värden",
       caption = "Källa: Krabbor")

p

# Se föreläsning

### Tree maps

require(portfolio)
consumtion <- read.csv2(file = "VIS4/D6/Konsumtion aggregerad.csv")

source("treemapbrewer.R")

treemap(id = consumtion$Land, area = consumtion$Olja, 
        group = consumtion$Land, color = consumtion$Kol,        
        main = "Olje och kolkonsumtion", 
        textcol = "Black", linecol = "Black", 
        pal = "Oranges")






  
